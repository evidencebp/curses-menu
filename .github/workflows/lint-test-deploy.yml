on:
  push:
    branches: [master, develop]
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

name: Tests

env:
  PYTHONWARNINGS: all
  TERM: xterm-256color

jobs:
  pre-commit:
    name: Various quality checks with pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0
        env:
          SKIP: "mypy,ruff,black,poetry-lock"

  ruff:
    name: Lint with ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Ruff Lint
        run: ruff .
      - name: Ruff Format
        run: ruff format .
  mypy:
    name: Type check with mypy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run mypy .
  initial-test:
    name: Test One Version First
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - run: poetry run pytest
        name: Run tests
      - run: poetry run coverage lcov
        name: Generate coverage report for this run
      - name: Upload coverage report for this run to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel: true

  test:
    name: Pytest via poetry
    needs:
      - pre-commit
      - ruff
      - mypy
      - initial-test

    strategy:
      matrix:
        python-version: ["3.11", "3.10", "3.9", "3.8", "3.12", "pypy3.8", "pypy3.9", "3.13.0-alpha.1" ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        exclude:
          - os: windows-latest
            python-version: pypy3
          - os: ubuntu-latest
            python-version: 3.11
            #we already did this one
    continue-on-error: ${{ matrix.python-version=='3.13.0-alpha.1' || (matrix.python-version == 'pypy3.11' && matrix.os == 'windows-latest') || matrix.python-version == 'pypy3.8' || (matrix.python-version == 'pypy3.9' && matrix.os == 'windows-latest') || (matrix.python-version == '3.12' && matrix.os == 'windows-latest')}}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - run: poetry run pytest
        name: Run tests
      - run: poetry run coverage lcov
        name: Generate coverage report for this run
      - name: Upload coverage report for this run to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel: true
  coveralls:
    name: Finalize coveralls data
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel-finished: true

  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Status of final test results
    needs: [ test ]
    steps:
      - run: |
          result="${{ needs.test.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi



  build-and-publish:
    name: Build and publish Python distributions to PyPI and TestPyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    permissions:
      id-token: write
    needs:
      - pre-commit
      - ruff
      - mypy
      - test

    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - run: poetry --version
      - run: poetry build
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
